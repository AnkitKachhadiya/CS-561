/*
1.For each customer, product, month and state combination, compute (1) the
customer's average sale of this product for the given month and state, (2) the
customer’s average sale for the given month and state, but for all other products (3)
the customer’s average sale for the given product and state, but for all other months
and (4) the average sale of the product and the month but for all other states.
*/

WITH AVG_SALES AS
	(SELECT CUST,
			PROD,
			MONTH,
			STATE,
			AVG(QUANT) AS CUST_AVG
		FROM SALES
		GROUP BY CUST,
			PROD,
			MONTH,
			STATE
		ORDER BY CUST),
	OTHER_PROD AS
	(SELECT AVG_SALES.CUST,
			AVG_SALES.PROD,
			AVG_SALES.MONTH,
			AVG_SALES.STATE,
			AVG_SALES.CUST_AVG,
			AVG(SALES.QUANT) AS "OTHER_PROD_AVG"
		FROM AVG_SALES
		JOIN SALES ON AVG_SALES.CUST = SALES.CUST
		AND AVG_SALES.PROD != SALES.PROD
		AND AVG_SALES.MONTH = SALES.MONTH
		AND AVG_SALES.STATE = SALES.STATE
		GROUP BY AVG_SALES.CUST,
			AVG_SALES.PROD,
			AVG_SALES.MONTH,
			AVG_SALES.STATE,
			AVG_SALES.CUST_AVG),
	OTHER_MONTH AS
	(SELECT AVG_SALES.CUST,
			AVG_SALES.PROD,
			AVG_SALES.MONTH,
			AVG_SALES.STATE,
			AVG_SALES.CUST_AVG,
			AVG(SALES.QUANT) AS "OTHER_MONTH_AVG"
		FROM AVG_SALES
		JOIN SALES ON AVG_SALES.CUST = SALES.CUST
		AND AVG_SALES.PROD = SALES.PROD
		AND AVG_SALES.MONTH != SALES.MONTH
		AND AVG_SALES.STATE = SALES.STATE
		GROUP BY AVG_SALES.CUST,
			AVG_SALES.PROD,
			AVG_SALES.MONTH,
			AVG_SALES.STATE,
			AVG_SALES.CUST_AVG),
	OTHER_STATE AS
	(SELECT AVG_SALES.CUST,
			AVG_SALES.PROD,
			AVG_SALES.MONTH,
			AVG_SALES.STATE,
			AVG_SALES.CUST_AVG,
			AVG(SALES.QUANT) AS "OTHER_STATE_AVG"
		FROM AVG_SALES
		JOIN SALES ON AVG_SALES.CUST = SALES.CUST
		AND AVG_SALES.PROD = SALES.PROD
		AND AVG_SALES.MONTH = SALES.MONTH
		AND AVG_SALES.STATE != SALES.STATE
		GROUP BY AVG_SALES.CUST,
			AVG_SALES.PROD,
			AVG_SALES.MONTH,
			AVG_SALES.STATE,
			AVG_SALES.CUST_AVG)
SELECT AVG_SALES.CUST AS "CUSTOMER",
	AVG_SALES.PROD AS "PRODUCT",
	AVG_SALES.MONTH AS "MONTH",
	AVG_SALES.STATE AS "STATE",
	AVG_SALES.CUST_AVG AS "CUST_AVG",
	OTHER_PROD."OTHER_PROD_AVG",
	OTHER_MONTH."OTHER_MONTH_AVG",
	OTHER_STATE."OTHER_STATE_AVG"
FROM AVG_SALES
FULL OUTER JOIN OTHER_PROD ON AVG_SALES.CUST = OTHER_PROD.CUST
AND AVG_SALES.PROD = OTHER_PROD.PROD
AND AVG_SALES.MONTH = OTHER_PROD.MONTH
AND AVG_SALES.STATE = OTHER_PROD.STATE
FULL OUTER JOIN OTHER_MONTH ON AVG_SALES.CUST = OTHER_MONTH.CUST
AND AVG_SALES.PROD = OTHER_MONTH.PROD
AND AVG_SALES.MONTH = OTHER_MONTH.MONTH
AND AVG_SALES.STATE = OTHER_MONTH.STATE
FULL OUTER JOIN OTHER_STATE ON AVG_SALES.CUST = OTHER_STATE.CUST
AND AVG_SALES.PROD = OTHER_STATE.PROD
AND AVG_SALES.MONTH = OTHER_STATE.MONTH
AND AVG_SALES.STATE = OTHER_STATE.STATE;


/*
2.For customer, product and state, show the average sales before and after each
quarter (e.g., for Q2, show average sales of Q1 and Q3. For “before” Q1 and “after”
Q4, display <NULL>. The “YEAR” attribute is not considered for this query – for
example, both Q1 of 2017 and Q1 of 2018 are considered Q1 regardless of the year.
*/

WITH ALL_SALES AS
	(SELECT CUST,
			PROD,
			STATE
		FROM SALES
		GROUP BY CUST,
			STATE,
			PROD),
	QUARTER_1 AS
	(SELECT CUST,
			PROD,
			STATE,
			AVG(QUANT)AS Q1
		FROM SALES
		WHERE MONTH BETWEEN 1 AND 3
		GROUP BY CUST,
			PROD,
			STATE),
	QUARTER_2 AS
	(SELECT CUST,
			PROD,
			STATE,
			AVG(QUANT)AS Q2
		FROM SALES
		WHERE MONTH BETWEEN 4 AND 6
		GROUP BY CUST,
			PROD,
			STATE),
	QUARTER_3 AS
	(SELECT CUST,
			PROD,
			STATE,
			AVG(QUANT)AS Q3
		FROM SALES
		WHERE MONTH BETWEEN 7 AND 9
		GROUP BY CUST,
			PROD,
			STATE),
	QUARTER_4 AS
	(SELECT CUST,
			PROD,
			STATE,
			AVG(QUANT)AS Q4
		FROM SALES
		WHERE MONTH BETWEEN 10 AND 12
		GROUP BY CUST,
			PROD,
			STATE),
	BEFORE_AFTER_1 AS
	(SELECT A.CUST AS "CUSTOMER",
			A.PROD AS "PRODUCT",
			A.STATE AS "STATE",
			1 AS "Q1",
			CAST (NULL AS numeric) AS "BEFORE_AVG",
			QUARTER_2.Q2 AS "AFTER_AVG"
		FROM ALL_SALES AS A
		LEFT OUTER JOIN QUARTER_2 ON A.CUST = QUARTER_2.CUST
		AND A.PROD = QUARTER_2.PROD
		AND A.STATE = QUARTER_2.STATE
		ORDER BY A.CUST,
			A.PROD,
			A.STATE),
	BEFORE_AFTER_2 AS
	(SELECT A.CUST AS "CUSTOMER",
			A.PROD AS "PRODUCT",
			A.STATE AS "STATE",
			2 AS "Q1",
			QUARTER_1.Q1 AS "BEFORE_AVG",
			QUARTER_3.Q3 AS "AFTER_AVG"
		FROM ALL_SALES AS A
		LEFT OUTER JOIN QUARTER_1 ON A.CUST = QUARTER_1.CUST
		AND A.PROD = QUARTER_1.PROD
		AND A.STATE = QUARTER_1.STATE
		LEFT OUTER JOIN QUARTER_3 ON A.CUST = QUARTER_3.CUST
		AND A.PROD = QUARTER_3.PROD
		AND A.STATE = QUARTER_3.STATE
		ORDER BY A.CUST,
			A.PROD,
			A.STATE),
	BEFORE_AFTER_3 AS
	(SELECT A.CUST AS "CUSTOMER",
			A.PROD AS "PRODUCT",
			A.STATE AS "STATE",
			3 AS "Q1",
			QUARTER_2.Q2 AS "BEFORE_AVG",
			QUARTER_4.Q4 AS "AFTER_AVG"
		FROM ALL_SALES AS A
		LEFT OUTER JOIN QUARTER_2 ON A.CUST = QUARTER_2.CUST
		AND A.PROD = QUARTER_2.PROD
		AND A.STATE = QUARTER_2.STATE
		LEFT OUTER JOIN QUARTER_4 ON A.CUST = QUARTER_4.CUST
		AND A.PROD = QUARTER_4.PROD
		AND A.STATE = QUARTER_4.STATE
		ORDER BY A.CUST,
			A.PROD,
			A.STATE),
	BEFORE_AFTER_4 AS
	(SELECT A.CUST AS "CUSTOMER",
			A.PROD AS "PRODUCT",
			A.STATE AS "STATE",
			4 AS "Q1",
			QUARTER_3.Q3 AS "BEFORE_AVG",
			CAST (NULL AS numeric) AS "AFTER_AVG"
		FROM ALL_SALES AS A
		LEFT OUTER JOIN QUARTER_3 ON A.CUST = QUARTER_3.CUST
		AND A.PROD = QUARTER_3.PROD
		AND A.STATE = QUARTER_3.STATE
		ORDER BY A.CUST,
			A.PROD,
			A.STATE),
	ALL_QUARTERS AS
	(SELECT *
		FROM BEFORE_AFTER_1
		UNION SELECT *
		FROM BEFORE_AFTER_2
		UNION SELECT *
		FROM BEFORE_AFTER_3
		UNION SELECT *
		FROM BEFORE_AFTER_4)
SELECT *
FROM ALL_QUARTERS
ORDER BY "CUSTOMER",
	"PRODUCT",
	"STATE",
	"Q1";


/*
3.For each product, find the median sales quantity (assume an odd number of sales for
simplicity of presentation). (NOTE – “median” is defined as “denoting or relating to a
value or quantity lying at the midpoint of a frequency distribution of observed values or
quantities, such that there is an equal probability of falling above or below it.” E.g.,
Median value of the list {13, 23, 12, 16, 15, 9, 29} is 15.
*/

WITH ORDERED_PROD AS
	(SELECT PROD,
			QUANT
		FROM SALES
		ORDER BY PROD,
			QUANT),
	MEDIAN AS
	(SELECT PROD,
			(COUNT(QUANT) / 2) + 1 AS MIDDLE_ROW
		FROM ORDERED_PROD
		GROUP BY PROD
		ORDER BY PROD),
	REPETITION AS
	(SELECT PROD,
			QUANT,
			COUNT(*) AS FREQUENCY
		FROM SALES
		GROUP BY PROD,
			QUANT
		ORDER BY PROD,
			QUANT),
	CUMULATIVE AS
	(SELECT R1.PROD,
			R1.QUANT,
			SUM(R2.FREQUENCY) AS RANK
		FROM REPETITION R1
		LEFT JOIN REPETITION R2 ON R1.PROD = R2.PROD
		AND R1.QUANT >= R2.QUANT
		GROUP BY R1.PROD,
			R1.QUANT
		ORDER BY R1.PROD,
			R1.QUANT)
SELECT CUMULATIVE.PROD AS "PRODUCT",
	MIN(CUMULATIVE.QUANT) AS "MEDIAN QUANT"
FROM CUMULATIVE
JOIN MEDIAN ON MEDIAN.PROD = CUMULATIVE.PROD
AND MEDIAN.MIDDLE_ROW <= CUMULATIVE.RANK
GROUP BY CUMULATIVE.PROD;


/*
4.For customer and product, find the month by which time, 75% of the sales quantities
have been purchased. Again, for this query, the “YEAR” attribute is not considered.
Another way to view this query is to pretend all 10,000 rows of sales data are from the
same year.
*/

WITH MONTHLY_SALES AS
	(SELECT CUST,
			PROD,
			MONTH,
			SUM(QUANT) AS MONTH_SUM
		FROM SALES
		GROUP BY CUST,
			PROD,
			MONTH
		ORDER BY CUST,
			PROD,
			MONTH),
	CUMULATIVE_SALES AS
	(SELECT M1.CUST,
			M1.PROD,
			M1.MONTH,
			SUM(M2.MONTH_SUM) AS CUMULATIVE_SUM
		FROM MONTHLY_SALES AS M1,
			MONTHLY_SALES AS M2
		WHERE M1.CUST = M2.CUST
			AND M1.PROD = M2.PROD
			AND M1.MONTH >= M2.MONTH
		GROUP BY M1.CUST,
			M1.PROD,
			M1.MONTH),
	"75_MONTHLY_SALES" AS
	(SELECT CUST,
			PROD,
			SUM(MONTH_SUM) * 0.75 AS "75_MONTH_SUM"
		FROM MONTHLY_SALES
		GROUP BY CUST,
			PROD)
SELECT CUMULATIVE_SALES.CUST AS "CUSTOMER",
	CUMULATIVE_SALES.PROD AS "PRODUCT",
	MIN(CUMULATIVE_SALES.MONTH) AS "75% PURCHASED BY MONTH"
FROM CUMULATIVE_SALES,
	"75_MONTHLY_SALES"
WHERE CUMULATIVE_SALES.CUST = "75_MONTHLY_SALES".CUST
	AND CUMULATIVE_SALES.PROD = "75_MONTHLY_SALES".PROD
	AND CUMULATIVE_SUM >= "75_MONTH_SUM"
GROUP BY CUMULATIVE_SALES.CUST,
	CUMULATIVE_SALES.PROD;